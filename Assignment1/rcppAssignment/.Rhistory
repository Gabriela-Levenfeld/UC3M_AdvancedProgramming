devtools::load_all(".")
set.seed(123) # for reproducibility
# X contains the inputs as a matrix of real numbers
data("iris")
iris_shuffled <- iris[sample(nrow(iris)), ]
# X contains the input attributes (excluding the class)
X <- iris_shuffled[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris_shuffled[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
#### Task 2 ####
print(my_knn_c_task2(X, X0, y))
my_knn_c_euclidean(X[1,], X0)
#### Task 3 ####
print(my_knn_c_task3(X, X0, y, 2))
my_knn_c_minkowsky(X[1,], X0, 2)
# Testing: Compile the C++ code with sourceCpp
library(Rcpp)
sourceCpp('C:/Users/gabri/OneDrive - Universidad Carlos III de Madrid/Escritorio/Advanced Programming/Task1/sketch_task1.cpp')
possible_p <- c(5,2,7,6)
print(my_knn_c_tuningp(X, X0, y, possible_p))
possible_p <- c(2,7,5,6)
print(my_knn_c_tuningp(X, X0, y, possible_p))
sourceCpp('C:/Users/gabri/OneDrive - Universidad Carlos III de Madrid/Escritorio/Advanced Programming/Task1/sketch_task1.cpp')
possible_p <- c(5,2,7,6)
print(my_knn_c_tuningp(X, X0, y, possible_p))
possible_p <- c(2,7,5,6)
print(my_knn_c_tuningp(X, X0, y, possible_p))
devtools::load_all(".")
#### Preparing data ####
set.seed(123) # for reproducibility
# X contains the inputs as a matrix of real numbers
data("iris")
iris_shuffled <- iris[sample(nrow(iris)), ]
# X contains the input attributes (excluding the class)
X <- iris_shuffled[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris_shuffled[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
possible_p <- c(0.5,6,0.2)
print(my_knn_c_tuningp(X, X0, y, possible_p))
#### Task 3 ####
print(my_knn_c_task3(X, X0, y, 2))
#### Task 2 ####
print(my_knn_c_task2(X, X0, y))
devtools::load_all(".")
#### Preparing data ####
set.seed(123) # for reproducibility
# X contains the inputs as a matrix of real numbers
data("iris")
iris_shuffled <- iris[sample(nrow(iris)), ]
# X contains the input attributes (excluding the class)
X <- iris_shuffled[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris_shuffled[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
print(my_knn_c_tuningp(X, X0, y, possible_p))
possible_p <- c(0.5,6,0.2)
print(my_knn_c_tuningp(X, X0, y, possible_p))
